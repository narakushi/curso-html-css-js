aula flexbox part 2 - aula 603 (39)

flex-wrap - quebra a linha jogando os elementos para outra linha
align-content - pega o conteúdo do elemento e alinha, pode ter os valores que constam em justify-content e align-items

---------------------------------------------------------------------------------------------------------------------------
aula flexbox part 3 - aula 604 (40) - com o display: flex, o elemento pai se comporta como um block, em relação a outros elementos

inline-flex - é uma mistura do inline com flex, neste caso o elemento não ocupa toda a largura da tela.

flex-wrap - quebra de linha

flex-flow - forma prática de unir flex-direction a flex wrap, passando direcionamento junto de quebra de linha

flex-grow - usa o espaço disponivel na tela para o tamanho do elemento divido igualmente entre os elementos. Divide os espaços que sobram entre os elementos

flex-basis - funciona semelhantemente a um min-width, estabelecendo um tamanho para o elemento. (passamos valores numericos que simbolizam proporção)

flex-shrink - permite que o elemento diminua conforme o tamanho da tela (passamos valores numericos que simbolizam proporção)

atalho para usar essas propriedades (recomendável)
flex: grow shrink basis; (ex: flex: 1 0 320px)

se quisermos distribuir espaços igualmente e depois, desejarmos que um elemento receba um pouco a mais de espaços, podemos:


.flex-item{
    flex: 1 1 320px; //distribuindo espaços igualmente com o flex-grow passando proporção de 1 para cada
    height: 200px;
    color: aliceblue;
    background: red;
}

.flex-item:nth-child(2){
    flex: 2 1 320px; // sobrescrevemos para o filho 2, que queremos uma proporção de 2x para ele, então ele recebe um espaço a mais
    background-color: purple;
}

align-self - alinha o elemento de forma indivídual, no seu eixo principal

order - permite escolherindivídualmente qual a ordem desejada para um determinado elemento

recurso da aula: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
https://www.alura.com.br/artigos/css-guia-do-flexbox

---------------------------------------------------------------------------------------------------------------------------
aula 605 (42) - flexbox parte 4

Um fato que deixa o flexbox muito poderoso é poder ter elementos flex dentro de outros elementos flex
para montar grids, grid em css são as melhores, mas com flex isso também é possível.

---------------------------------------------------------------------------------------------------------------------------
aula 606 (43) - propriedade CSS Grid

A grid é muito similar ao flex, visto que o seu efeito é causado nos seus elementos filhos
Se tivermos´uma grid, possuímos uma grade, então conseguimos configurar linhas e colunas

propriedades:

grid-template-columns: 200px 1fr; - os valores podem ser diversos, neste exemplo teremos 2 colunas, a primeira com 200px e a segunda tomando o que resta de espaço, esse 1fr é 
' fragmento, podemos adicionar mais do mesmo

grid-template-columns: repeat(numero de colunas desejadas a serem repetidas, tamanho) - com essa função podemos estabelecer maiores quantidades
de colunas
ex: 
-     grid-template-columns: repeat(10, 1fr); 10 colunas de 1fragmento
-    grid-template-columns: repeat(3, 1fr 2fr); intercala para cada 3 colunas um fragmento de cada espessura

-  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); grid responsiva onde, auto-fill estabelece
um tamanho que caiba na tela entre 320px e 1 fragmento (restantes do tamanho da tela)

-  grid-template-rows: 2fr 1fr 3fr; para configurar as linhas da grid, em sequencia, configurou a linha 01
02 e 03.

- grid-template-rows: repeat(2, 1fr 2fr); a  grid-template-rows: repeat(2, 1fr 2fr);

Geralmente não precisamos mexer com rows, se for só uma simples tabela.

Para selecionar uma ou mais colunas, podemos usar o grid-column-start ou grid-column-end

exemplo:

.grid div:nth-child(5){
    background: darkblue ;
    grid-column-start: 2; //seleciona a coluna 2
    grid-column-end: 4; //seleciona a coluna 4 (a grid só tem 3 colunas visuais, mas considere os espaços entre cada celula)
}

se quisermos selecionar uma linha em específico, usamos o grid-row-start: no nth-child o que e passado é o numero a celula (div filha) 
 
.grid div:nth-child(5), .grid div:nth-child(6){
    background: darkblue ;
    grid-column-start: 1;
    grid-column-end: 4;
    grid-row-start: 3;  
}

*linha de grid não possui tamanho, só quem tem tamanho é o conteúdo*

além de poder adicionar linhas para toda a linha da grid e possível adicionar linhas para uma celula isolada da grid:
.grid div:nth-child(5){
    background: darkblue;
    grid-row: span 2;
}

*span trabalha com apenas valores positivos*


para tornar a grid responsiva podemos fazer: 

@media (max-width: 768px){
    .grid div:nth-child(5){
        grid-column: span 1;
    }
}

------------------------------------------------------------------------------------------------------------------------------
aula 607 - css grid parte 2

na grid, existem as celulas (conteudos filhos do elemento pai) e as marcações da grid, em uma grid de 3 celulas
teremos 4 colunas

se quisermos tornar essas colunas variáveis podemos nomeá-las assim:

grid-template-columns: [um] 1fr [dois] 1fr [três] 1fr [quatro];

podemos usar um atalho para selecionar essas colunas:

Forma normalmente usada
 /*grid-column-start: 1;
    grid-column-end: 4;*/

Forma com o atalho
    grid-column: um / quatro;

 
Além disso, é possível fazer um outro atalho com grid-area:

grid: linha que inicia / coluna que inicia / linha que termina / coluna que termina;

ex: 

grid-area: um / um / quatro / quatro;

--------------------------------------------------------------------------------------------------------------------------------
aula 608 (45) - espaçamentos entre linhas e colunas - GAP

Usado para dar espaçamento na grid entre colunas e linhas

Para dar espaçamento só em linhas:

    row-gap: 30px;

Para dar espaçamento só em colunas:

    column-gap: 30px;

E para usar no atalho:

gap: 30px <- aqui será para linhas 50px <- colunas

Como era antes da grid?

usava-se margin, por exemplo:
    margin-right: 30px; - espaço entre colunas
    margin-bottom: 30px; - espaço entre linhas

Mas tinha um problema: sobrava espaço no layout

Para corrigir isso um dos consertos era criar uma div container e armazenar os elementos nela configurada com o max-width e outras
propriedades que envolvesse posicionamento


A função calc() também era uma saída permitindo somar medidas diferentes para consertar a disposição dos elementos na página
.grid{
    width: calc(100% + 30px);
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
}

no exemplo acima, a tela estava com 30px residuais, ao usar o calc(), somou-se a largura da tela, os 30px 


.container{
    max-width: 1200px;
    margin: 0 auto;
    overflow-x: hidden;
}

no container que possui a grid como filha, para sumir com a barra de rolagem que aparece após realizar o uso da função calc
usamos overflow

Em alguns casos, usar configurações antigas como margin no lugar de gap, position e float no lugar de flexbox ou grid, é preciso, pois há navegadores que não
as suportam.

Então tecnlogias mais antigas, possuem maior compatibilidade com a maioria dos navegadores.

para lidar com os 30px residuais outra forma é além de usar o container, fazer uso de uma margin negativa na grid:


.grid{
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    margin-right: -30px;
}

no mais, o uso do css vai da necessidade do site e para quais navegadores será disponibilizado.

-----------------------------------------------------------------------------------------------------------------------------------------------------------
aula 46 (609) - grid template areas

outra forma de organizar a grid, com grid template areas. Ela possibilita nomear as areas da grid e alocá-las aonde preferirmos na página.


 







 

